// Mocks generated by Mockito 5.4.4 from annotations
// in floating_logger/test/network/network_main.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:async' as _i8;

import 'package:dio/src/dio_mixin.dart' as _i6;
import 'package:dio/src/headers.dart' as _i3;
import 'package:dio/src/options.dart' as _i2;
import 'package:dio/src/redirect_record.dart' as _i7;
import 'package:floating_logger/floating_logger.dart' as _i5;
import 'package:floating_logger/src/network/network_model.dart' as _i4;
import 'package:floating_logger/src/widgets/floating_logger_toast.dart' as _i9;
import 'package:mockito/mockito.dart' as _i1;
import 'package:mockito/src/dummies.dart' as _i10;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: deprecated_member_use
// ignore_for_file: deprecated_member_use_from_same_package
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

class _FakeRequestOptions_0 extends _i1.SmartFake
    implements _i2.RequestOptions {
  _FakeRequestOptions_0(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeHeaders_1 extends _i1.SmartFake implements _i3.Headers {
  _FakeHeaders_1(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeUri_2 extends _i1.SmartFake implements Uri {
  _FakeUri_2(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeLogRepository_3 extends _i1.SmartFake implements _i4.LogRepository {
  _FakeLogRepository_3(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeBaseOptions_4 extends _i1.SmartFake implements _i2.BaseOptions {
  _FakeBaseOptions_4(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeHttpClientAdapter_5 extends _i1.SmartFake
    implements _i5.HttpClientAdapter {
  _FakeHttpClientAdapter_5(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeTransformer_6 extends _i1.SmartFake implements _i5.Transformer {
  _FakeTransformer_6(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeInterceptors_7 extends _i1.SmartFake implements _i5.Interceptors {
  _FakeInterceptors_7(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeResponse_8<T1> extends _i1.SmartFake implements _i5.Response<T1> {
  _FakeResponse_8(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeDio_9 extends _i1.SmartFake implements _i5.Dio {
  _FakeDio_9(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeBuildContext_10 extends _i1.SmartFake implements _i5.BuildContext {
  _FakeBuildContext_10(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeStackTrace_11 extends _i1.SmartFake implements StackTrace {
  _FakeStackTrace_11(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeDioException_12 extends _i1.SmartFake implements _i5.DioException {
  _FakeDioException_12(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeValueNotifier_13<T> extends _i1.SmartFake
    implements _i5.ValueNotifier<T> {
  _FakeValueNotifier_13(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeInterceptorState_14<T> extends _i1.SmartFake
    implements _i6.InterceptorState<T> {
  _FakeInterceptorState_14(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

/// A class which mocks [Response].
///
/// See the documentation for Mockito's code generation for more information.
class MockResponse<T> extends _i1.Mock implements _i5.Response<T> {
  @override
  set data(T? _data) => super.noSuchMethod(
        Invocation.setter(
          #data,
          _data,
        ),
        returnValueForMissingStub: null,
      );

  @override
  _i2.RequestOptions get requestOptions => (super.noSuchMethod(
        Invocation.getter(#requestOptions),
        returnValue: _FakeRequestOptions_0(
          this,
          Invocation.getter(#requestOptions),
        ),
        returnValueForMissingStub: _FakeRequestOptions_0(
          this,
          Invocation.getter(#requestOptions),
        ),
      ) as _i2.RequestOptions);

  @override
  set requestOptions(_i2.RequestOptions? _requestOptions) => super.noSuchMethod(
        Invocation.setter(
          #requestOptions,
          _requestOptions,
        ),
        returnValueForMissingStub: null,
      );

  @override
  set statusCode(int? _statusCode) => super.noSuchMethod(
        Invocation.setter(
          #statusCode,
          _statusCode,
        ),
        returnValueForMissingStub: null,
      );

  @override
  set statusMessage(String? _statusMessage) => super.noSuchMethod(
        Invocation.setter(
          #statusMessage,
          _statusMessage,
        ),
        returnValueForMissingStub: null,
      );

  @override
  _i3.Headers get headers => (super.noSuchMethod(
        Invocation.getter(#headers),
        returnValue: _FakeHeaders_1(
          this,
          Invocation.getter(#headers),
        ),
        returnValueForMissingStub: _FakeHeaders_1(
          this,
          Invocation.getter(#headers),
        ),
      ) as _i3.Headers);

  @override
  set headers(_i3.Headers? _headers) => super.noSuchMethod(
        Invocation.setter(
          #headers,
          _headers,
        ),
        returnValueForMissingStub: null,
      );

  @override
  bool get isRedirect => (super.noSuchMethod(
        Invocation.getter(#isRedirect),
        returnValue: false,
        returnValueForMissingStub: false,
      ) as bool);

  @override
  set isRedirect(bool? _isRedirect) => super.noSuchMethod(
        Invocation.setter(
          #isRedirect,
          _isRedirect,
        ),
        returnValueForMissingStub: null,
      );

  @override
  List<_i7.RedirectRecord> get redirects => (super.noSuchMethod(
        Invocation.getter(#redirects),
        returnValue: <_i7.RedirectRecord>[],
        returnValueForMissingStub: <_i7.RedirectRecord>[],
      ) as List<_i7.RedirectRecord>);

  @override
  set redirects(List<_i7.RedirectRecord>? _redirects) => super.noSuchMethod(
        Invocation.setter(
          #redirects,
          _redirects,
        ),
        returnValueForMissingStub: null,
      );

  @override
  Map<String, dynamic> get extra => (super.noSuchMethod(
        Invocation.getter(#extra),
        returnValue: <String, dynamic>{},
        returnValueForMissingStub: <String, dynamic>{},
      ) as Map<String, dynamic>);

  @override
  set extra(Map<String, dynamic>? _extra) => super.noSuchMethod(
        Invocation.setter(
          #extra,
          _extra,
        ),
        returnValueForMissingStub: null,
      );

  @override
  Uri get realUri => (super.noSuchMethod(
        Invocation.getter(#realUri),
        returnValue: _FakeUri_2(
          this,
          Invocation.getter(#realUri),
        ),
        returnValueForMissingStub: _FakeUri_2(
          this,
          Invocation.getter(#realUri),
        ),
      ) as Uri);
}

/// A class which mocks [DioLogger].
///
/// See the documentation for Mockito's code generation for more information.
class MockDioLogger extends _i1.Mock implements _i5.DioLogger {
  @override
  _i4.LogRepository get logRepository => (super.noSuchMethod(
        Invocation.getter(#logRepository),
        returnValue: _FakeLogRepository_3(
          this,
          Invocation.getter(#logRepository),
        ),
        returnValueForMissingStub: _FakeLogRepository_3(
          this,
          Invocation.getter(#logRepository),
        ),
      ) as _i4.LogRepository);

  @override
  _i4.LogRepository get logs => (super.noSuchMethod(
        Invocation.getter(#logs),
        returnValue: _FakeLogRepository_3(
          this,
          Invocation.getter(#logs),
        ),
        returnValueForMissingStub: _FakeLogRepository_3(
          this,
          Invocation.getter(#logs),
        ),
      ) as _i4.LogRepository);

  @override
  _i2.BaseOptions get options => (super.noSuchMethod(
        Invocation.getter(#options),
        returnValue: _FakeBaseOptions_4(
          this,
          Invocation.getter(#options),
        ),
        returnValueForMissingStub: _FakeBaseOptions_4(
          this,
          Invocation.getter(#options),
        ),
      ) as _i2.BaseOptions);

  @override
  set options(_i2.BaseOptions? _options) => super.noSuchMethod(
        Invocation.setter(
          #options,
          _options,
        ),
        returnValueForMissingStub: null,
      );

  @override
  _i5.HttpClientAdapter get httpClientAdapter => (super.noSuchMethod(
        Invocation.getter(#httpClientAdapter),
        returnValue: _FakeHttpClientAdapter_5(
          this,
          Invocation.getter(#httpClientAdapter),
        ),
        returnValueForMissingStub: _FakeHttpClientAdapter_5(
          this,
          Invocation.getter(#httpClientAdapter),
        ),
      ) as _i5.HttpClientAdapter);

  @override
  set httpClientAdapter(_i5.HttpClientAdapter? _httpClientAdapter) =>
      super.noSuchMethod(
        Invocation.setter(
          #httpClientAdapter,
          _httpClientAdapter,
        ),
        returnValueForMissingStub: null,
      );

  @override
  _i5.Transformer get transformer => (super.noSuchMethod(
        Invocation.getter(#transformer),
        returnValue: _FakeTransformer_6(
          this,
          Invocation.getter(#transformer),
        ),
        returnValueForMissingStub: _FakeTransformer_6(
          this,
          Invocation.getter(#transformer),
        ),
      ) as _i5.Transformer);

  @override
  set transformer(_i5.Transformer? _transformer) => super.noSuchMethod(
        Invocation.setter(
          #transformer,
          _transformer,
        ),
        returnValueForMissingStub: null,
      );

  @override
  _i5.Interceptors get interceptors => (super.noSuchMethod(
        Invocation.getter(#interceptors),
        returnValue: _FakeInterceptors_7(
          this,
          Invocation.getter(#interceptors),
        ),
        returnValueForMissingStub: _FakeInterceptors_7(
          this,
          Invocation.getter(#interceptors),
        ),
      ) as _i5.Interceptors);

  @override
  void addInterceptor(_i5.Interceptor? interceptor) => super.noSuchMethod(
        Invocation.method(
          #addInterceptor,
          [interceptor],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void addListInterceptor(List<_i5.Interceptor>? interceptorsList) =>
      super.noSuchMethod(
        Invocation.method(
          #addListInterceptor,
          [interceptorsList],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void close({bool? force = false}) => super.noSuchMethod(
        Invocation.method(
          #close,
          [],
          {#force: force},
        ),
        returnValueForMissingStub: null,
      );

  @override
  _i8.Future<_i5.Response<T>> get<T>(
    String? path, {
    Map<String, dynamic>? queryParameters,
    Object? data,
    _i2.Options? options,
    _i5.CancelToken? cancelToken,
    _i2.ProgressCallback? onReceiveProgress,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #get,
          [path],
          {
            #queryParameters: queryParameters,
            #data: data,
            #options: options,
            #cancelToken: cancelToken,
            #onReceiveProgress: onReceiveProgress,
          },
        ),
        returnValue: _i8.Future<_i5.Response<T>>.value(_FakeResponse_8<T>(
          this,
          Invocation.method(
            #get,
            [path],
            {
              #queryParameters: queryParameters,
              #data: data,
              #options: options,
              #cancelToken: cancelToken,
              #onReceiveProgress: onReceiveProgress,
            },
          ),
        )),
        returnValueForMissingStub:
            _i8.Future<_i5.Response<T>>.value(_FakeResponse_8<T>(
          this,
          Invocation.method(
            #get,
            [path],
            {
              #queryParameters: queryParameters,
              #data: data,
              #options: options,
              #cancelToken: cancelToken,
              #onReceiveProgress: onReceiveProgress,
            },
          ),
        )),
      ) as _i8.Future<_i5.Response<T>>);

  @override
  _i8.Future<_i5.Response<T>> getUri<T>(
    Uri? uri, {
    Object? data,
    _i2.Options? options,
    _i5.CancelToken? cancelToken,
    _i2.ProgressCallback? onReceiveProgress,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #getUri,
          [uri],
          {
            #data: data,
            #options: options,
            #cancelToken: cancelToken,
            #onReceiveProgress: onReceiveProgress,
          },
        ),
        returnValue: _i8.Future<_i5.Response<T>>.value(_FakeResponse_8<T>(
          this,
          Invocation.method(
            #getUri,
            [uri],
            {
              #data: data,
              #options: options,
              #cancelToken: cancelToken,
              #onReceiveProgress: onReceiveProgress,
            },
          ),
        )),
        returnValueForMissingStub:
            _i8.Future<_i5.Response<T>>.value(_FakeResponse_8<T>(
          this,
          Invocation.method(
            #getUri,
            [uri],
            {
              #data: data,
              #options: options,
              #cancelToken: cancelToken,
              #onReceiveProgress: onReceiveProgress,
            },
          ),
        )),
      ) as _i8.Future<_i5.Response<T>>);

  @override
  _i8.Future<_i5.Response<T>> post<T>(
    String? path, {
    Object? data,
    Map<String, dynamic>? queryParameters,
    _i2.Options? options,
    _i5.CancelToken? cancelToken,
    _i2.ProgressCallback? onSendProgress,
    _i2.ProgressCallback? onReceiveProgress,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #post,
          [path],
          {
            #data: data,
            #queryParameters: queryParameters,
            #options: options,
            #cancelToken: cancelToken,
            #onSendProgress: onSendProgress,
            #onReceiveProgress: onReceiveProgress,
          },
        ),
        returnValue: _i8.Future<_i5.Response<T>>.value(_FakeResponse_8<T>(
          this,
          Invocation.method(
            #post,
            [path],
            {
              #data: data,
              #queryParameters: queryParameters,
              #options: options,
              #cancelToken: cancelToken,
              #onSendProgress: onSendProgress,
              #onReceiveProgress: onReceiveProgress,
            },
          ),
        )),
        returnValueForMissingStub:
            _i8.Future<_i5.Response<T>>.value(_FakeResponse_8<T>(
          this,
          Invocation.method(
            #post,
            [path],
            {
              #data: data,
              #queryParameters: queryParameters,
              #options: options,
              #cancelToken: cancelToken,
              #onSendProgress: onSendProgress,
              #onReceiveProgress: onReceiveProgress,
            },
          ),
        )),
      ) as _i8.Future<_i5.Response<T>>);

  @override
  _i8.Future<_i5.Response<T>> postUri<T>(
    Uri? uri, {
    Object? data,
    _i2.Options? options,
    _i5.CancelToken? cancelToken,
    _i2.ProgressCallback? onSendProgress,
    _i2.ProgressCallback? onReceiveProgress,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #postUri,
          [uri],
          {
            #data: data,
            #options: options,
            #cancelToken: cancelToken,
            #onSendProgress: onSendProgress,
            #onReceiveProgress: onReceiveProgress,
          },
        ),
        returnValue: _i8.Future<_i5.Response<T>>.value(_FakeResponse_8<T>(
          this,
          Invocation.method(
            #postUri,
            [uri],
            {
              #data: data,
              #options: options,
              #cancelToken: cancelToken,
              #onSendProgress: onSendProgress,
              #onReceiveProgress: onReceiveProgress,
            },
          ),
        )),
        returnValueForMissingStub:
            _i8.Future<_i5.Response<T>>.value(_FakeResponse_8<T>(
          this,
          Invocation.method(
            #postUri,
            [uri],
            {
              #data: data,
              #options: options,
              #cancelToken: cancelToken,
              #onSendProgress: onSendProgress,
              #onReceiveProgress: onReceiveProgress,
            },
          ),
        )),
      ) as _i8.Future<_i5.Response<T>>);

  @override
  _i8.Future<_i5.Response<T>> put<T>(
    String? path, {
    Object? data,
    Map<String, dynamic>? queryParameters,
    _i2.Options? options,
    _i5.CancelToken? cancelToken,
    _i2.ProgressCallback? onSendProgress,
    _i2.ProgressCallback? onReceiveProgress,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #put,
          [path],
          {
            #data: data,
            #queryParameters: queryParameters,
            #options: options,
            #cancelToken: cancelToken,
            #onSendProgress: onSendProgress,
            #onReceiveProgress: onReceiveProgress,
          },
        ),
        returnValue: _i8.Future<_i5.Response<T>>.value(_FakeResponse_8<T>(
          this,
          Invocation.method(
            #put,
            [path],
            {
              #data: data,
              #queryParameters: queryParameters,
              #options: options,
              #cancelToken: cancelToken,
              #onSendProgress: onSendProgress,
              #onReceiveProgress: onReceiveProgress,
            },
          ),
        )),
        returnValueForMissingStub:
            _i8.Future<_i5.Response<T>>.value(_FakeResponse_8<T>(
          this,
          Invocation.method(
            #put,
            [path],
            {
              #data: data,
              #queryParameters: queryParameters,
              #options: options,
              #cancelToken: cancelToken,
              #onSendProgress: onSendProgress,
              #onReceiveProgress: onReceiveProgress,
            },
          ),
        )),
      ) as _i8.Future<_i5.Response<T>>);

  @override
  _i8.Future<_i5.Response<T>> putUri<T>(
    Uri? uri, {
    Object? data,
    _i2.Options? options,
    _i5.CancelToken? cancelToken,
    _i2.ProgressCallback? onSendProgress,
    _i2.ProgressCallback? onReceiveProgress,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #putUri,
          [uri],
          {
            #data: data,
            #options: options,
            #cancelToken: cancelToken,
            #onSendProgress: onSendProgress,
            #onReceiveProgress: onReceiveProgress,
          },
        ),
        returnValue: _i8.Future<_i5.Response<T>>.value(_FakeResponse_8<T>(
          this,
          Invocation.method(
            #putUri,
            [uri],
            {
              #data: data,
              #options: options,
              #cancelToken: cancelToken,
              #onSendProgress: onSendProgress,
              #onReceiveProgress: onReceiveProgress,
            },
          ),
        )),
        returnValueForMissingStub:
            _i8.Future<_i5.Response<T>>.value(_FakeResponse_8<T>(
          this,
          Invocation.method(
            #putUri,
            [uri],
            {
              #data: data,
              #options: options,
              #cancelToken: cancelToken,
              #onSendProgress: onSendProgress,
              #onReceiveProgress: onReceiveProgress,
            },
          ),
        )),
      ) as _i8.Future<_i5.Response<T>>);

  @override
  _i8.Future<_i5.Response<T>> head<T>(
    String? path, {
    Object? data,
    Map<String, dynamic>? queryParameters,
    _i2.Options? options,
    _i5.CancelToken? cancelToken,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #head,
          [path],
          {
            #data: data,
            #queryParameters: queryParameters,
            #options: options,
            #cancelToken: cancelToken,
          },
        ),
        returnValue: _i8.Future<_i5.Response<T>>.value(_FakeResponse_8<T>(
          this,
          Invocation.method(
            #head,
            [path],
            {
              #data: data,
              #queryParameters: queryParameters,
              #options: options,
              #cancelToken: cancelToken,
            },
          ),
        )),
        returnValueForMissingStub:
            _i8.Future<_i5.Response<T>>.value(_FakeResponse_8<T>(
          this,
          Invocation.method(
            #head,
            [path],
            {
              #data: data,
              #queryParameters: queryParameters,
              #options: options,
              #cancelToken: cancelToken,
            },
          ),
        )),
      ) as _i8.Future<_i5.Response<T>>);

  @override
  _i8.Future<_i5.Response<T>> headUri<T>(
    Uri? uri, {
    Object? data,
    _i2.Options? options,
    _i5.CancelToken? cancelToken,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #headUri,
          [uri],
          {
            #data: data,
            #options: options,
            #cancelToken: cancelToken,
          },
        ),
        returnValue: _i8.Future<_i5.Response<T>>.value(_FakeResponse_8<T>(
          this,
          Invocation.method(
            #headUri,
            [uri],
            {
              #data: data,
              #options: options,
              #cancelToken: cancelToken,
            },
          ),
        )),
        returnValueForMissingStub:
            _i8.Future<_i5.Response<T>>.value(_FakeResponse_8<T>(
          this,
          Invocation.method(
            #headUri,
            [uri],
            {
              #data: data,
              #options: options,
              #cancelToken: cancelToken,
            },
          ),
        )),
      ) as _i8.Future<_i5.Response<T>>);

  @override
  _i8.Future<_i5.Response<T>> delete<T>(
    String? path, {
    Object? data,
    Map<String, dynamic>? queryParameters,
    _i2.Options? options,
    _i5.CancelToken? cancelToken,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #delete,
          [path],
          {
            #data: data,
            #queryParameters: queryParameters,
            #options: options,
            #cancelToken: cancelToken,
          },
        ),
        returnValue: _i8.Future<_i5.Response<T>>.value(_FakeResponse_8<T>(
          this,
          Invocation.method(
            #delete,
            [path],
            {
              #data: data,
              #queryParameters: queryParameters,
              #options: options,
              #cancelToken: cancelToken,
            },
          ),
        )),
        returnValueForMissingStub:
            _i8.Future<_i5.Response<T>>.value(_FakeResponse_8<T>(
          this,
          Invocation.method(
            #delete,
            [path],
            {
              #data: data,
              #queryParameters: queryParameters,
              #options: options,
              #cancelToken: cancelToken,
            },
          ),
        )),
      ) as _i8.Future<_i5.Response<T>>);

  @override
  _i8.Future<_i5.Response<T>> deleteUri<T>(
    Uri? uri, {
    Object? data,
    _i2.Options? options,
    _i5.CancelToken? cancelToken,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #deleteUri,
          [uri],
          {
            #data: data,
            #options: options,
            #cancelToken: cancelToken,
          },
        ),
        returnValue: _i8.Future<_i5.Response<T>>.value(_FakeResponse_8<T>(
          this,
          Invocation.method(
            #deleteUri,
            [uri],
            {
              #data: data,
              #options: options,
              #cancelToken: cancelToken,
            },
          ),
        )),
        returnValueForMissingStub:
            _i8.Future<_i5.Response<T>>.value(_FakeResponse_8<T>(
          this,
          Invocation.method(
            #deleteUri,
            [uri],
            {
              #data: data,
              #options: options,
              #cancelToken: cancelToken,
            },
          ),
        )),
      ) as _i8.Future<_i5.Response<T>>);

  @override
  _i8.Future<_i5.Response<T>> patch<T>(
    String? path, {
    Object? data,
    Map<String, dynamic>? queryParameters,
    _i2.Options? options,
    _i5.CancelToken? cancelToken,
    _i2.ProgressCallback? onSendProgress,
    _i2.ProgressCallback? onReceiveProgress,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #patch,
          [path],
          {
            #data: data,
            #queryParameters: queryParameters,
            #options: options,
            #cancelToken: cancelToken,
            #onSendProgress: onSendProgress,
            #onReceiveProgress: onReceiveProgress,
          },
        ),
        returnValue: _i8.Future<_i5.Response<T>>.value(_FakeResponse_8<T>(
          this,
          Invocation.method(
            #patch,
            [path],
            {
              #data: data,
              #queryParameters: queryParameters,
              #options: options,
              #cancelToken: cancelToken,
              #onSendProgress: onSendProgress,
              #onReceiveProgress: onReceiveProgress,
            },
          ),
        )),
        returnValueForMissingStub:
            _i8.Future<_i5.Response<T>>.value(_FakeResponse_8<T>(
          this,
          Invocation.method(
            #patch,
            [path],
            {
              #data: data,
              #queryParameters: queryParameters,
              #options: options,
              #cancelToken: cancelToken,
              #onSendProgress: onSendProgress,
              #onReceiveProgress: onReceiveProgress,
            },
          ),
        )),
      ) as _i8.Future<_i5.Response<T>>);

  @override
  _i8.Future<_i5.Response<T>> patchUri<T>(
    Uri? uri, {
    Object? data,
    _i2.Options? options,
    _i5.CancelToken? cancelToken,
    _i2.ProgressCallback? onSendProgress,
    _i2.ProgressCallback? onReceiveProgress,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #patchUri,
          [uri],
          {
            #data: data,
            #options: options,
            #cancelToken: cancelToken,
            #onSendProgress: onSendProgress,
            #onReceiveProgress: onReceiveProgress,
          },
        ),
        returnValue: _i8.Future<_i5.Response<T>>.value(_FakeResponse_8<T>(
          this,
          Invocation.method(
            #patchUri,
            [uri],
            {
              #data: data,
              #options: options,
              #cancelToken: cancelToken,
              #onSendProgress: onSendProgress,
              #onReceiveProgress: onReceiveProgress,
            },
          ),
        )),
        returnValueForMissingStub:
            _i8.Future<_i5.Response<T>>.value(_FakeResponse_8<T>(
          this,
          Invocation.method(
            #patchUri,
            [uri],
            {
              #data: data,
              #options: options,
              #cancelToken: cancelToken,
              #onSendProgress: onSendProgress,
              #onReceiveProgress: onReceiveProgress,
            },
          ),
        )),
      ) as _i8.Future<_i5.Response<T>>);

  @override
  _i8.Future<_i5.Response<dynamic>> downloadUri(
    Uri? uri,
    dynamic savePath, {
    _i2.ProgressCallback? onReceiveProgress,
    _i5.CancelToken? cancelToken,
    bool? deleteOnError = true,
    _i2.FileAccessMode? fileAccessMode = _i2.FileAccessMode.write,
    String? lengthHeader = r'content-length',
    Object? data,
    _i2.Options? options,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #downloadUri,
          [
            uri,
            savePath,
          ],
          {
            #onReceiveProgress: onReceiveProgress,
            #cancelToken: cancelToken,
            #deleteOnError: deleteOnError,
            #fileAccessMode: fileAccessMode,
            #lengthHeader: lengthHeader,
            #data: data,
            #options: options,
          },
        ),
        returnValue:
            _i8.Future<_i5.Response<dynamic>>.value(_FakeResponse_8<dynamic>(
          this,
          Invocation.method(
            #downloadUri,
            [
              uri,
              savePath,
            ],
            {
              #onReceiveProgress: onReceiveProgress,
              #cancelToken: cancelToken,
              #deleteOnError: deleteOnError,
              #fileAccessMode: fileAccessMode,
              #lengthHeader: lengthHeader,
              #data: data,
              #options: options,
            },
          ),
        )),
        returnValueForMissingStub:
            _i8.Future<_i5.Response<dynamic>>.value(_FakeResponse_8<dynamic>(
          this,
          Invocation.method(
            #downloadUri,
            [
              uri,
              savePath,
            ],
            {
              #onReceiveProgress: onReceiveProgress,
              #cancelToken: cancelToken,
              #deleteOnError: deleteOnError,
              #fileAccessMode: fileAccessMode,
              #lengthHeader: lengthHeader,
              #data: data,
              #options: options,
            },
          ),
        )),
      ) as _i8.Future<_i5.Response<dynamic>>);

  @override
  _i8.Future<_i5.Response<dynamic>> download(
    String? urlPath,
    dynamic savePath, {
    _i2.ProgressCallback? onReceiveProgress,
    Map<String, dynamic>? queryParameters,
    _i5.CancelToken? cancelToken,
    bool? deleteOnError = true,
    _i2.FileAccessMode? fileAccessMode = _i2.FileAccessMode.write,
    String? lengthHeader = r'content-length',
    Object? data,
    _i2.Options? options,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #download,
          [
            urlPath,
            savePath,
          ],
          {
            #onReceiveProgress: onReceiveProgress,
            #queryParameters: queryParameters,
            #cancelToken: cancelToken,
            #deleteOnError: deleteOnError,
            #fileAccessMode: fileAccessMode,
            #lengthHeader: lengthHeader,
            #data: data,
            #options: options,
          },
        ),
        returnValue:
            _i8.Future<_i5.Response<dynamic>>.value(_FakeResponse_8<dynamic>(
          this,
          Invocation.method(
            #download,
            [
              urlPath,
              savePath,
            ],
            {
              #onReceiveProgress: onReceiveProgress,
              #queryParameters: queryParameters,
              #cancelToken: cancelToken,
              #deleteOnError: deleteOnError,
              #fileAccessMode: fileAccessMode,
              #lengthHeader: lengthHeader,
              #data: data,
              #options: options,
            },
          ),
        )),
        returnValueForMissingStub:
            _i8.Future<_i5.Response<dynamic>>.value(_FakeResponse_8<dynamic>(
          this,
          Invocation.method(
            #download,
            [
              urlPath,
              savePath,
            ],
            {
              #onReceiveProgress: onReceiveProgress,
              #queryParameters: queryParameters,
              #cancelToken: cancelToken,
              #deleteOnError: deleteOnError,
              #fileAccessMode: fileAccessMode,
              #lengthHeader: lengthHeader,
              #data: data,
              #options: options,
            },
          ),
        )),
      ) as _i8.Future<_i5.Response<dynamic>>);

  @override
  _i8.Future<_i5.Response<T>> requestUri<T>(
    Uri? uri, {
    Object? data,
    _i5.CancelToken? cancelToken,
    _i2.Options? options,
    _i2.ProgressCallback? onSendProgress,
    _i2.ProgressCallback? onReceiveProgress,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #requestUri,
          [uri],
          {
            #data: data,
            #cancelToken: cancelToken,
            #options: options,
            #onSendProgress: onSendProgress,
            #onReceiveProgress: onReceiveProgress,
          },
        ),
        returnValue: _i8.Future<_i5.Response<T>>.value(_FakeResponse_8<T>(
          this,
          Invocation.method(
            #requestUri,
            [uri],
            {
              #data: data,
              #cancelToken: cancelToken,
              #options: options,
              #onSendProgress: onSendProgress,
              #onReceiveProgress: onReceiveProgress,
            },
          ),
        )),
        returnValueForMissingStub:
            _i8.Future<_i5.Response<T>>.value(_FakeResponse_8<T>(
          this,
          Invocation.method(
            #requestUri,
            [uri],
            {
              #data: data,
              #cancelToken: cancelToken,
              #options: options,
              #onSendProgress: onSendProgress,
              #onReceiveProgress: onReceiveProgress,
            },
          ),
        )),
      ) as _i8.Future<_i5.Response<T>>);

  @override
  _i8.Future<_i5.Response<T>> request<T>(
    String? path, {
    Object? data,
    Map<String, dynamic>? queryParameters,
    _i5.CancelToken? cancelToken,
    _i2.Options? options,
    _i2.ProgressCallback? onSendProgress,
    _i2.ProgressCallback? onReceiveProgress,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #request,
          [path],
          {
            #data: data,
            #queryParameters: queryParameters,
            #cancelToken: cancelToken,
            #options: options,
            #onSendProgress: onSendProgress,
            #onReceiveProgress: onReceiveProgress,
          },
        ),
        returnValue: _i8.Future<_i5.Response<T>>.value(_FakeResponse_8<T>(
          this,
          Invocation.method(
            #request,
            [path],
            {
              #data: data,
              #queryParameters: queryParameters,
              #cancelToken: cancelToken,
              #options: options,
              #onSendProgress: onSendProgress,
              #onReceiveProgress: onReceiveProgress,
            },
          ),
        )),
        returnValueForMissingStub:
            _i8.Future<_i5.Response<T>>.value(_FakeResponse_8<T>(
          this,
          Invocation.method(
            #request,
            [path],
            {
              #data: data,
              #queryParameters: queryParameters,
              #cancelToken: cancelToken,
              #options: options,
              #onSendProgress: onSendProgress,
              #onReceiveProgress: onReceiveProgress,
            },
          ),
        )),
      ) as _i8.Future<_i5.Response<T>>);

  @override
  _i8.Future<_i5.Response<T>> fetch<T>(_i2.RequestOptions? requestOptions) =>
      (super.noSuchMethod(
        Invocation.method(
          #fetch,
          [requestOptions],
        ),
        returnValue: _i8.Future<_i5.Response<T>>.value(_FakeResponse_8<T>(
          this,
          Invocation.method(
            #fetch,
            [requestOptions],
          ),
        )),
        returnValueForMissingStub:
            _i8.Future<_i5.Response<T>>.value(_FakeResponse_8<T>(
          this,
          Invocation.method(
            #fetch,
            [requestOptions],
          ),
        )),
      ) as _i8.Future<_i5.Response<T>>);

  @override
  _i5.Dio clone({
    _i2.BaseOptions? options,
    _i5.Interceptors? interceptors,
    _i5.HttpClientAdapter? httpClientAdapter,
    _i5.Transformer? transformer,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #clone,
          [],
          {
            #options: options,
            #interceptors: interceptors,
            #httpClientAdapter: httpClientAdapter,
            #transformer: transformer,
          },
        ),
        returnValue: _FakeDio_9(
          this,
          Invocation.method(
            #clone,
            [],
            {
              #options: options,
              #interceptors: interceptors,
              #httpClientAdapter: httpClientAdapter,
              #transformer: transformer,
            },
          ),
        ),
        returnValueForMissingStub: _FakeDio_9(
          this,
          Invocation.method(
            #clone,
            [],
            {
              #options: options,
              #interceptors: interceptors,
              #httpClientAdapter: httpClientAdapter,
              #transformer: transformer,
            },
          ),
        ),
      ) as _i5.Dio);
}

/// A class which mocks [LoggerToast].
///
/// See the documentation for Mockito's code generation for more information.
class MockLoggerToast extends _i1.Mock implements _i9.LoggerToast {
  @override
  _i5.BuildContext get context => (super.noSuchMethod(
        Invocation.getter(#context),
        returnValue: _FakeBuildContext_10(
          this,
          Invocation.getter(#context),
        ),
        returnValueForMissingStub: _FakeBuildContext_10(
          this,
          Invocation.getter(#context),
        ),
      ) as _i5.BuildContext);

  @override
  void $howSuccessToast(String? message) => super.noSuchMethod(
        Invocation.method(
          #$howSuccessToast,
          [message],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void $howErrorToast(String? message) => super.noSuchMethod(
        Invocation.method(
          #$howErrorToast,
          [message],
        ),
        returnValueForMissingStub: null,
      );
}

/// A class which mocks [Interceptor].
///
/// See the documentation for Mockito's code generation for more information.
class MockInterceptor extends _i1.Mock implements _i5.Interceptor {
  @override
  void onRequest(
    _i2.RequestOptions? options,
    _i5.RequestInterceptorHandler? handler,
  ) =>
      super.noSuchMethod(
        Invocation.method(
          #onRequest,
          [
            options,
            handler,
          ],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void onResponse(
    _i5.Response<dynamic>? response,
    _i5.ResponseInterceptorHandler? handler,
  ) =>
      super.noSuchMethod(
        Invocation.method(
          #onResponse,
          [
            response,
            handler,
          ],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void onError(
    _i5.DioException? err,
    _i5.ErrorInterceptorHandler? handler,
  ) =>
      super.noSuchMethod(
        Invocation.method(
          #onError,
          [
            err,
            handler,
          ],
        ),
        returnValueForMissingStub: null,
      );
}

/// A class which mocks [DioException].
///
/// See the documentation for Mockito's code generation for more information.
class MockDioException extends _i1.Mock implements _i5.DioException {
  @override
  _i2.RequestOptions get requestOptions => (super.noSuchMethod(
        Invocation.getter(#requestOptions),
        returnValue: _FakeRequestOptions_0(
          this,
          Invocation.getter(#requestOptions),
        ),
        returnValueForMissingStub: _FakeRequestOptions_0(
          this,
          Invocation.getter(#requestOptions),
        ),
      ) as _i2.RequestOptions);

  @override
  _i5.DioExceptionType get type => (super.noSuchMethod(
        Invocation.getter(#type),
        returnValue: _i5.DioExceptionType.connectionTimeout,
        returnValueForMissingStub: _i5.DioExceptionType.connectionTimeout,
      ) as _i5.DioExceptionType);

  @override
  StackTrace get stackTrace => (super.noSuchMethod(
        Invocation.getter(#stackTrace),
        returnValue: _FakeStackTrace_11(
          this,
          Invocation.getter(#stackTrace),
        ),
        returnValueForMissingStub: _FakeStackTrace_11(
          this,
          Invocation.getter(#stackTrace),
        ),
      ) as StackTrace);

  @override
  set stringBuilder(_i5.DioExceptionReadableStringBuilder? _stringBuilder) =>
      super.noSuchMethod(
        Invocation.setter(
          #stringBuilder,
          _stringBuilder,
        ),
        returnValueForMissingStub: null,
      );

  @override
  _i5.DioException copyWith({
    _i2.RequestOptions? requestOptions,
    _i5.Response<dynamic>? response,
    _i5.DioExceptionType? type,
    Object? error,
    StackTrace? stackTrace,
    String? message,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #copyWith,
          [],
          {
            #requestOptions: requestOptions,
            #response: response,
            #type: type,
            #error: error,
            #stackTrace: stackTrace,
            #message: message,
          },
        ),
        returnValue: _FakeDioException_12(
          this,
          Invocation.method(
            #copyWith,
            [],
            {
              #requestOptions: requestOptions,
              #response: response,
              #type: type,
              #error: error,
              #stackTrace: stackTrace,
              #message: message,
            },
          ),
        ),
        returnValueForMissingStub: _FakeDioException_12(
          this,
          Invocation.method(
            #copyWith,
            [],
            {
              #requestOptions: requestOptions,
              #response: response,
              #type: type,
              #error: error,
              #stackTrace: stackTrace,
              #message: message,
            },
          ),
        ),
      ) as _i5.DioException);
}

/// A class which mocks [LogRepository].
///
/// See the documentation for Mockito's code generation for more information.
class MockLogRepository extends _i1.Mock implements _i4.LogRepository {
  @override
  _i5.ValueNotifier<List<_i4.LogRepositoryModel>> get logsNotifier =>
      (super.noSuchMethod(
        Invocation.getter(#logsNotifier),
        returnValue: _FakeValueNotifier_13<List<_i4.LogRepositoryModel>>(
          this,
          Invocation.getter(#logsNotifier),
        ),
        returnValueForMissingStub:
            _FakeValueNotifier_13<List<_i4.LogRepositoryModel>>(
          this,
          Invocation.getter(#logsNotifier),
        ),
      ) as _i5.ValueNotifier<List<_i4.LogRepositoryModel>>);

  @override
  void addLog(_i4.LogRepositoryModel? log) => super.noSuchMethod(
        Invocation.method(
          #addLog,
          [log],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void clearLogs() => super.noSuchMethod(
        Invocation.method(
          #clearLogs,
          [],
        ),
        returnValueForMissingStub: null,
      );
}

/// A class which mocks [RequestOptions].
///
/// See the documentation for Mockito's code generation for more information.
class MockRequestOptions extends _i1.Mock implements _i2.RequestOptions {
  @override
  set sourceStackTrace(StackTrace? _sourceStackTrace) => super.noSuchMethod(
        Invocation.setter(
          #sourceStackTrace,
          _sourceStackTrace,
        ),
        returnValueForMissingStub: null,
      );

  @override
  set data(dynamic _data) => super.noSuchMethod(
        Invocation.setter(
          #data,
          _data,
        ),
        returnValueForMissingStub: null,
      );

  @override
  String get path => (super.noSuchMethod(
        Invocation.getter(#path),
        returnValue: _i10.dummyValue<String>(
          this,
          Invocation.getter(#path),
        ),
        returnValueForMissingStub: _i10.dummyValue<String>(
          this,
          Invocation.getter(#path),
        ),
      ) as String);

  @override
  set path(String? _path) => super.noSuchMethod(
        Invocation.setter(
          #path,
          _path,
        ),
        returnValueForMissingStub: null,
      );

  @override
  set cancelToken(_i5.CancelToken? _cancelToken) => super.noSuchMethod(
        Invocation.setter(
          #cancelToken,
          _cancelToken,
        ),
        returnValueForMissingStub: null,
      );

  @override
  set onReceiveProgress(_i2.ProgressCallback? _onReceiveProgress) =>
      super.noSuchMethod(
        Invocation.setter(
          #onReceiveProgress,
          _onReceiveProgress,
        ),
        returnValueForMissingStub: null,
      );

  @override
  set onSendProgress(_i2.ProgressCallback? _onSendProgress) =>
      super.noSuchMethod(
        Invocation.setter(
          #onSendProgress,
          _onSendProgress,
        ),
        returnValueForMissingStub: null,
      );

  @override
  Uri get uri => (super.noSuchMethod(
        Invocation.getter(#uri),
        returnValue: _FakeUri_2(
          this,
          Invocation.getter(#uri),
        ),
        returnValueForMissingStub: _FakeUri_2(
          this,
          Invocation.getter(#uri),
        ),
      ) as Uri);

  @override
  String get method => (super.noSuchMethod(
        Invocation.getter(#method),
        returnValue: _i10.dummyValue<String>(
          this,
          Invocation.getter(#method),
        ),
        returnValueForMissingStub: _i10.dummyValue<String>(
          this,
          Invocation.getter(#method),
        ),
      ) as String);

  @override
  set method(String? _method) => super.noSuchMethod(
        Invocation.setter(
          #method,
          _method,
        ),
        returnValueForMissingStub: null,
      );

  @override
  bool get preserveHeaderCase => (super.noSuchMethod(
        Invocation.getter(#preserveHeaderCase),
        returnValue: false,
        returnValueForMissingStub: false,
      ) as bool);

  @override
  set preserveHeaderCase(bool? _preserveHeaderCase) => super.noSuchMethod(
        Invocation.setter(
          #preserveHeaderCase,
          _preserveHeaderCase,
        ),
        returnValueForMissingStub: null,
      );

  @override
  _i2.ResponseType get responseType => (super.noSuchMethod(
        Invocation.getter(#responseType),
        returnValue: _i2.ResponseType.json,
        returnValueForMissingStub: _i2.ResponseType.json,
      ) as _i2.ResponseType);

  @override
  set responseType(_i2.ResponseType? _responseType) => super.noSuchMethod(
        Invocation.setter(
          #responseType,
          _responseType,
        ),
        returnValueForMissingStub: null,
      );

  @override
  _i2.ValidateStatus get validateStatus => (super.noSuchMethod(
        Invocation.getter(#validateStatus),
        returnValue: (int? status) => false,
        returnValueForMissingStub: (int? status) => false,
      ) as _i2.ValidateStatus);

  @override
  set validateStatus(_i2.ValidateStatus? _validateStatus) => super.noSuchMethod(
        Invocation.setter(
          #validateStatus,
          _validateStatus,
        ),
        returnValueForMissingStub: null,
      );

  @override
  bool get receiveDataWhenStatusError => (super.noSuchMethod(
        Invocation.getter(#receiveDataWhenStatusError),
        returnValue: false,
        returnValueForMissingStub: false,
      ) as bool);

  @override
  set receiveDataWhenStatusError(bool? _receiveDataWhenStatusError) =>
      super.noSuchMethod(
        Invocation.setter(
          #receiveDataWhenStatusError,
          _receiveDataWhenStatusError,
        ),
        returnValueForMissingStub: null,
      );

  @override
  Map<String, dynamic> get extra => (super.noSuchMethod(
        Invocation.getter(#extra),
        returnValue: <String, dynamic>{},
        returnValueForMissingStub: <String, dynamic>{},
      ) as Map<String, dynamic>);

  @override
  set extra(Map<String, dynamic>? _extra) => super.noSuchMethod(
        Invocation.setter(
          #extra,
          _extra,
        ),
        returnValueForMissingStub: null,
      );

  @override
  bool get followRedirects => (super.noSuchMethod(
        Invocation.getter(#followRedirects),
        returnValue: false,
        returnValueForMissingStub: false,
      ) as bool);

  @override
  set followRedirects(bool? _followRedirects) => super.noSuchMethod(
        Invocation.setter(
          #followRedirects,
          _followRedirects,
        ),
        returnValueForMissingStub: null,
      );

  @override
  int get maxRedirects => (super.noSuchMethod(
        Invocation.getter(#maxRedirects),
        returnValue: 0,
        returnValueForMissingStub: 0,
      ) as int);

  @override
  set maxRedirects(int? _maxRedirects) => super.noSuchMethod(
        Invocation.setter(
          #maxRedirects,
          _maxRedirects,
        ),
        returnValueForMissingStub: null,
      );

  @override
  bool get persistentConnection => (super.noSuchMethod(
        Invocation.getter(#persistentConnection),
        returnValue: false,
        returnValueForMissingStub: false,
      ) as bool);

  @override
  set persistentConnection(bool? _persistentConnection) => super.noSuchMethod(
        Invocation.setter(
          #persistentConnection,
          _persistentConnection,
        ),
        returnValueForMissingStub: null,
      );

  @override
  set requestEncoder(_i2.RequestEncoder? _requestEncoder) => super.noSuchMethod(
        Invocation.setter(
          #requestEncoder,
          _requestEncoder,
        ),
        returnValueForMissingStub: null,
      );

  @override
  set responseDecoder(_i2.ResponseDecoder? _responseDecoder) =>
      super.noSuchMethod(
        Invocation.setter(
          #responseDecoder,
          _responseDecoder,
        ),
        returnValueForMissingStub: null,
      );

  @override
  _i2.ListFormat get listFormat => (super.noSuchMethod(
        Invocation.getter(#listFormat),
        returnValue: _i2.ListFormat.csv,
        returnValueForMissingStub: _i2.ListFormat.csv,
      ) as _i2.ListFormat);

  @override
  set listFormat(_i2.ListFormat? _listFormat) => super.noSuchMethod(
        Invocation.setter(
          #listFormat,
          _listFormat,
        ),
        returnValueForMissingStub: null,
      );

  @override
  Map<String, dynamic> get headers => (super.noSuchMethod(
        Invocation.getter(#headers),
        returnValue: <String, dynamic>{},
        returnValueForMissingStub: <String, dynamic>{},
      ) as Map<String, dynamic>);

  @override
  set headers(Map<String, dynamic>? headers) => super.noSuchMethod(
        Invocation.setter(
          #headers,
          headers,
        ),
        returnValueForMissingStub: null,
      );

  @override
  set sendTimeout(Duration? value) => super.noSuchMethod(
        Invocation.setter(
          #sendTimeout,
          value,
        ),
        returnValueForMissingStub: null,
      );

  @override
  set receiveTimeout(Duration? value) => super.noSuchMethod(
        Invocation.setter(
          #receiveTimeout,
          value,
        ),
        returnValueForMissingStub: null,
      );

  @override
  set contentType(String? contentType) => super.noSuchMethod(
        Invocation.setter(
          #contentType,
          contentType,
        ),
        returnValueForMissingStub: null,
      );

  @override
  Map<String, dynamic> get queryParameters => (super.noSuchMethod(
        Invocation.getter(#queryParameters),
        returnValue: <String, dynamic>{},
        returnValueForMissingStub: <String, dynamic>{},
      ) as Map<String, dynamic>);

  @override
  set queryParameters(Map<String, dynamic>? _queryParameters) =>
      super.noSuchMethod(
        Invocation.setter(
          #queryParameters,
          _queryParameters,
        ),
        returnValueForMissingStub: null,
      );

  @override
  String get baseUrl => (super.noSuchMethod(
        Invocation.getter(#baseUrl),
        returnValue: _i10.dummyValue<String>(
          this,
          Invocation.getter(#baseUrl),
        ),
        returnValueForMissingStub: _i10.dummyValue<String>(
          this,
          Invocation.getter(#baseUrl),
        ),
      ) as String);

  @override
  set baseUrl(String? value) => super.noSuchMethod(
        Invocation.setter(
          #baseUrl,
          value,
        ),
        returnValueForMissingStub: null,
      );

  @override
  set connectTimeout(Duration? value) => super.noSuchMethod(
        Invocation.setter(
          #connectTimeout,
          value,
        ),
        returnValueForMissingStub: null,
      );

  @override
  _i2.RequestOptions copyWith({
    String? method,
    Duration? sendTimeout,
    Duration? receiveTimeout,
    Duration? connectTimeout,
    dynamic data,
    String? path,
    Map<String, dynamic>? queryParameters,
    String? baseUrl,
    _i2.ProgressCallback? onReceiveProgress,
    _i2.ProgressCallback? onSendProgress,
    _i5.CancelToken? cancelToken,
    Map<String, dynamic>? extra,
    Map<String, dynamic>? headers,
    bool? preserveHeaderCase,
    _i2.ResponseType? responseType,
    String? contentType,
    _i2.ValidateStatus? validateStatus,
    bool? receiveDataWhenStatusError,
    bool? followRedirects,
    int? maxRedirects,
    bool? persistentConnection,
    _i2.RequestEncoder? requestEncoder,
    _i2.ResponseDecoder? responseDecoder,
    _i2.ListFormat? listFormat,
    bool? setRequestContentTypeWhenNoPayload,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #copyWith,
          [],
          {
            #method: method,
            #sendTimeout: sendTimeout,
            #receiveTimeout: receiveTimeout,
            #connectTimeout: connectTimeout,
            #data: data,
            #path: path,
            #queryParameters: queryParameters,
            #baseUrl: baseUrl,
            #onReceiveProgress: onReceiveProgress,
            #onSendProgress: onSendProgress,
            #cancelToken: cancelToken,
            #extra: extra,
            #headers: headers,
            #preserveHeaderCase: preserveHeaderCase,
            #responseType: responseType,
            #contentType: contentType,
            #validateStatus: validateStatus,
            #receiveDataWhenStatusError: receiveDataWhenStatusError,
            #followRedirects: followRedirects,
            #maxRedirects: maxRedirects,
            #persistentConnection: persistentConnection,
            #requestEncoder: requestEncoder,
            #responseDecoder: responseDecoder,
            #listFormat: listFormat,
            #setRequestContentTypeWhenNoPayload:
                setRequestContentTypeWhenNoPayload,
          },
        ),
        returnValue: _FakeRequestOptions_0(
          this,
          Invocation.method(
            #copyWith,
            [],
            {
              #method: method,
              #sendTimeout: sendTimeout,
              #receiveTimeout: receiveTimeout,
              #connectTimeout: connectTimeout,
              #data: data,
              #path: path,
              #queryParameters: queryParameters,
              #baseUrl: baseUrl,
              #onReceiveProgress: onReceiveProgress,
              #onSendProgress: onSendProgress,
              #cancelToken: cancelToken,
              #extra: extra,
              #headers: headers,
              #preserveHeaderCase: preserveHeaderCase,
              #responseType: responseType,
              #contentType: contentType,
              #validateStatus: validateStatus,
              #receiveDataWhenStatusError: receiveDataWhenStatusError,
              #followRedirects: followRedirects,
              #maxRedirects: maxRedirects,
              #persistentConnection: persistentConnection,
              #requestEncoder: requestEncoder,
              #responseDecoder: responseDecoder,
              #listFormat: listFormat,
              #setRequestContentTypeWhenNoPayload:
                  setRequestContentTypeWhenNoPayload,
            },
          ),
        ),
        returnValueForMissingStub: _FakeRequestOptions_0(
          this,
          Invocation.method(
            #copyWith,
            [],
            {
              #method: method,
              #sendTimeout: sendTimeout,
              #receiveTimeout: receiveTimeout,
              #connectTimeout: connectTimeout,
              #data: data,
              #path: path,
              #queryParameters: queryParameters,
              #baseUrl: baseUrl,
              #onReceiveProgress: onReceiveProgress,
              #onSendProgress: onSendProgress,
              #cancelToken: cancelToken,
              #extra: extra,
              #headers: headers,
              #preserveHeaderCase: preserveHeaderCase,
              #responseType: responseType,
              #contentType: contentType,
              #validateStatus: validateStatus,
              #receiveDataWhenStatusError: receiveDataWhenStatusError,
              #followRedirects: followRedirects,
              #maxRedirects: maxRedirects,
              #persistentConnection: persistentConnection,
              #requestEncoder: requestEncoder,
              #responseDecoder: responseDecoder,
              #listFormat: listFormat,
              #setRequestContentTypeWhenNoPayload:
                  setRequestContentTypeWhenNoPayload,
            },
          ),
        ),
      ) as _i2.RequestOptions);
}

/// A class which mocks [FlutterClipboard].
///
/// See the documentation for Mockito's code generation for more information.
class MockFlutterClipboard extends _i1.Mock implements _i5.FlutterClipboard {}

/// A class which mocks [ErrorInterceptorHandler].
///
/// See the documentation for Mockito's code generation for more information.
class MockErrorInterceptorHandler extends _i1.Mock
    implements _i5.ErrorInterceptorHandler {
  @override
  _i8.Future<_i6.InterceptorState<dynamic>> get future => (super.noSuchMethod(
        Invocation.getter(#future),
        returnValue: _i8.Future<_i6.InterceptorState<dynamic>>.value(
            _FakeInterceptorState_14<dynamic>(
          this,
          Invocation.getter(#future),
        )),
        returnValueForMissingStub:
            _i8.Future<_i6.InterceptorState<dynamic>>.value(
                _FakeInterceptorState_14<dynamic>(
          this,
          Invocation.getter(#future),
        )),
      ) as _i8.Future<_i6.InterceptorState<dynamic>>);

  @override
  bool get isCompleted => (super.noSuchMethod(
        Invocation.getter(#isCompleted),
        returnValue: false,
        returnValueForMissingStub: false,
      ) as bool);

  @override
  void next(_i5.DioException? error) => super.noSuchMethod(
        Invocation.method(
          #next,
          [error],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void resolve(_i5.Response<dynamic>? response) => super.noSuchMethod(
        Invocation.method(
          #resolve,
          [response],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void reject(_i5.DioException? error) => super.noSuchMethod(
        Invocation.method(
          #reject,
          [error],
        ),
        returnValueForMissingStub: null,
      );
}

/// A class which mocks [RequestInterceptorHandler].
///
/// See the documentation for Mockito's code generation for more information.
class MockRequestInterceptorHandler extends _i1.Mock
    implements _i5.RequestInterceptorHandler {
  @override
  _i8.Future<_i6.InterceptorState<dynamic>> get future => (super.noSuchMethod(
        Invocation.getter(#future),
        returnValue: _i8.Future<_i6.InterceptorState<dynamic>>.value(
            _FakeInterceptorState_14<dynamic>(
          this,
          Invocation.getter(#future),
        )),
        returnValueForMissingStub:
            _i8.Future<_i6.InterceptorState<dynamic>>.value(
                _FakeInterceptorState_14<dynamic>(
          this,
          Invocation.getter(#future),
        )),
      ) as _i8.Future<_i6.InterceptorState<dynamic>>);

  @override
  bool get isCompleted => (super.noSuchMethod(
        Invocation.getter(#isCompleted),
        returnValue: false,
        returnValueForMissingStub: false,
      ) as bool);

  @override
  void next(_i2.RequestOptions? requestOptions) => super.noSuchMethod(
        Invocation.method(
          #next,
          [requestOptions],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void resolve(
    _i5.Response<dynamic>? response, [
    bool? callFollowingResponseInterceptor = false,
  ]) =>
      super.noSuchMethod(
        Invocation.method(
          #resolve,
          [
            response,
            callFollowingResponseInterceptor,
          ],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void reject(
    _i5.DioException? error, [
    bool? callFollowingErrorInterceptor = false,
  ]) =>
      super.noSuchMethod(
        Invocation.method(
          #reject,
          [
            error,
            callFollowingErrorInterceptor,
          ],
        ),
        returnValueForMissingStub: null,
      );
}

/// A class which mocks [ResponseInterceptorHandler].
///
/// See the documentation for Mockito's code generation for more information.
class MockResponseInterceptorHandler extends _i1.Mock
    implements _i5.ResponseInterceptorHandler {
  @override
  _i8.Future<_i6.InterceptorState<dynamic>> get future => (super.noSuchMethod(
        Invocation.getter(#future),
        returnValue: _i8.Future<_i6.InterceptorState<dynamic>>.value(
            _FakeInterceptorState_14<dynamic>(
          this,
          Invocation.getter(#future),
        )),
        returnValueForMissingStub:
            _i8.Future<_i6.InterceptorState<dynamic>>.value(
                _FakeInterceptorState_14<dynamic>(
          this,
          Invocation.getter(#future),
        )),
      ) as _i8.Future<_i6.InterceptorState<dynamic>>);

  @override
  bool get isCompleted => (super.noSuchMethod(
        Invocation.getter(#isCompleted),
        returnValue: false,
        returnValueForMissingStub: false,
      ) as bool);

  @override
  void next(_i5.Response<dynamic>? response) => super.noSuchMethod(
        Invocation.method(
          #next,
          [response],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void resolve(_i5.Response<dynamic>? response) => super.noSuchMethod(
        Invocation.method(
          #resolve,
          [response],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void reject(
    _i5.DioException? error, [
    bool? callFollowingErrorInterceptor = false,
  ]) =>
      super.noSuchMethod(
        Invocation.method(
          #reject,
          [
            error,
            callFollowingErrorInterceptor,
          ],
        ),
        returnValueForMissingStub: null,
      );
}
